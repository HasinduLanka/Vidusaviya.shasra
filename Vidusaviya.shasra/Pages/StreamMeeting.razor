@inject IJSRuntime JsRuntime
@page "/streamer"
@page "/"
@using System.IO;
@*console.log(document.getElementById('id').getBoundingClientRect())*@


<h1>@stat</h1>

<div class="MainContainer">

    <div class="DataContainer">
        <div class="container-fluid">

            @if (IsInitialized)
            {

                @if (!IsCamGettingReady && !IsStartingStreaming)
                {
                    <input type="button" class="btn-sm btn-@(IsCamReady ? "danger" : "success")" @onclick="ToggleCam" value="@((IsCamReady ? "Close Camera" : "Open Camera"))" />
                }
                else
                {
                    <h2>Opening Camera... 📷 Please Allow if asked for camera Permissions 📷 </h2>
                }

                @if (!IsStartingStreaming)
                {
                    <input type="button" class="btn-sm btn-@(IsStreaming ? "danger" : "success")" @onclick="ToggleStreaming" value="@((IsStreaming ? "Stop Streaming" : "Start Streaming"))" />
                }
            }

            <hr />
            <div class="row">
                <div class="col-md-4">
                    <center class="Bordered-Box">
                        <h6>Live Feed</h6>
                        <video id="live" autoplay></video>
                    </center>
                </div>
                <div class="col-md-4">
                    <center class="Bordered-Box">
                        <h6>Compressed Feed</h6>
                        <canvas id="MidCanvas"></canvas>
                        <h6>@(IsLiveReady ? "⬤":"⏹")</h6>
                    </center>
                </div>
            </div>
            <hr />
            <div class="row">
                <div class="col-md-6">
                    <center class="Bordered-Box">
                        <h5>Peer simulation</h5>
                        <video id="Viewer" width="1280" height="720" autoplay controls controlsList="nodownload" preload="auto"></video>
                    </center>
                </div>
            </div>
        </div>
    </div>
</div>



@code
{


    // style="display: none" muted

    //public bool IsDebug = false;

    public bool MeetingStarted = false;

    public string stat { get; set; }
    public string msg { get; set; }

    public bool IsInitialized = false;

    public bool IsCamReady = false;
    public bool IsCamGettingReady = false;
    public bool IsScreenReady = false;
    public bool IsLiveReady => IsCamReady || IsScreenReady;

    public bool IsStreaming = false;
    public bool IsStartingStreaming = false;
    public System.Timers.Timer StreamerTimer;

    public System.Diagnostics.Stopwatch Stopwatch = new System.Diagnostics.Stopwatch();

    static FileAsyncManager<string, string> fileAsyncManager;
    static FileAsyncManager<byte[], string> downloadAsyncManager;

    MeetingStreamerSettings settings;
    MeetingPeerSettings PeerSettings;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);


        if (!IsInitialized)
        {

            Stopwatch.Start();

            stat = await JsRuntime.InvokeAsync<string>("SayHi", "C Sharp");

            settings = Vidusaviya.shasra.Testing.RepoInfo.TestMeeting;

            ValueTask InitV = JsRuntime.InvokeVoidAsync("InitializeViewer");
            ValueTask InitStr = JsRuntime.InvokeVoidAsync("InitializeStreamer");

            StreamerTimer = new System.Timers.Timer(LoopIntervel);
            StreamerTimer.Elapsed += StreamLoop;

            Task InitM = StartMeeting();

            // stat = await downloadAsyncManager.Thread.FileClient.Upload("", null);

            await InitV;
            await InitStr;
            await InitM;
            //Console.WriteLine(await downloadAsyncManager.Thread.FileClient.Delete(null));

            IsInitialized = true;
            await InvokeAsync(StateHasChanged);
        }
    }





    async void ToggleCam()
    {
        IsCamGettingReady = true;

        if (IsCamReady)
        {
            await CloseLive();
        }
        else
        {
            await OpenCam();
        }

        await InvokeAsync(StateHasChanged);
    }

    async Task OpenCam()
    {
        IsCamReady = false;
        IsScreenReady = false;
        IsCamGettingReady = true;

        await JsRuntime.InvokeVoidAsync("OpenCam");

        for (int i = 0; i < 60; i++)
        {
            if (await JsRuntime.InvokeAsync<string>("IsLiveReady") == "R")
            {
                IsCamReady = true;
                break;
            }
            else
            {
                await Task.Delay(500);
            }
        }

        IsCamGettingReady = false;


    }


    async Task CloseLive()
    {
        IsCamReady = false;
        IsScreenReady = false;

        await JsRuntime.InvokeAsync<string>("CloseLive");

        IsCamGettingReady = false;
    }




    public async void ToggleStreaming()
    {

        IsStartingStreaming = true;

        if (IsStreaming)
        {
            await StopStreaming();
        }
        else
        {
            await StartStreaming();
        }
        await InvokeAsync(StateHasChanged);
    }



    //Streaming is not Related to IsLiveReady. It can Stream without Live
    async Task StartStreaming()
    {
        IsStreaming = false;
        IsStartingStreaming = true;

        await JsRuntime.InvokeAsync<string>("StartStreaming", 4096000, 4000);
        StreamLooping = false;
        StreamerTimer.Start();

        IsStreaming = true;
        IsStartingStreaming = false;

    }

    async Task StopStreaming()
    {
        IsStreaming = false;
        IsStartingStreaming = true;

        StreamerTimer.Stop();
        await JsRuntime.InvokeAsync<string>("StopStreaming");

        IsStreaming = false;
        IsStartingStreaming = false;
    }




    long LoopIntervel = 100;
    bool StreamLooping = false;

    Queue<string> uploads = new Queue<string>();

    async void StreamLoop(object sender, System.Timers.ElapsedEventArgs e)
    {
        //Loop:
        if (StreamLooping) return;
        StreamLooping = true;

        var thread = fileAsyncManager.Advance();

        if (thread.task != null)
        {
            string url = (string)await thread.task;

            string hap;

            if (url != "NOTFOUND")
            {
                uploads.Enqueue(url);
                hap = $"Uploaded Live Stream {url}";
            }
            else
            {
                hap = "";
            }

            long now = Stopwatch.ElapsedMilliseconds;
            long d = now - thread.LastTime;
            thread.LastTime = now;

            if (hap != "")
                Console.WriteLine($" {hap} in {d}");

        }
        else
        {
            thread.LastTime = Stopwatch.ElapsedMilliseconds;
        }

        Func<Task<object>> x = (async () =>
        {
            string bloburl = "";
            while (bloburl == "")
            {
                bloburl = await JsRuntime.InvokeAsync<string>("GetRec", null);
                await Task.Delay(500);
            }


            byte[] blb = await thread.FileClient.BytesFromURL(bloburl);

            string I64;
            if (thread.Aes != null)
            {
                I64 = thread.Aes.EncryptToBase64String(blb);
            }
            else
            {
                I64 = Convert.ToBase64String(blb);
            }


            //string FileSuffix = (++thread.LastFileIndex).ToString();
            //string UpURL = await thread.FileClient.Upload(FileSuffix, I64);
            //I64 = null;

            //string DI64 = await thread.FileClient.DownloadFromURL(UpURL);


            string DI64 = I64;
            string UpURL = "";


            if (thread.Aes != null)
            {
                DI64 = thread.Aes.DecryptBase64String(DI64);
            }

            await JsRuntime.InvokeVoidAsync("AddVideo", "data:video/webm;base64," + DI64);

            msg = UpURL;
            return UpURL;

        }

        );


        thread.task = x.Invoke();

        StreamLooping = false;


    }



    private static byte[] ReadFully(Stream input)
    {
        using (MemoryStream ms = new MemoryStream())
        {
            input.CopyTo(ms);
            return ms.ToArray();
        }
    }


    async Task StartMeeting()
    {

        switch (settings.CDNType)
        {
            case CDNType.FTP:
                break;

            case CDNType.Github:


                PeerSettings = settings.PeerSettings();
                int pscount = PeerSettings.URLPrefixes.Count();
                downloadAsyncManager = new FileAsyncManager<byte[], string>(pscount);

                for (int i = 0; i < pscount; i++)
                {
                    var thr = new FileAsyncThread<byte[], string>(new GitDownloadCient(PeerSettings.URLPrefixes[i]));
                    downloadAsyncManager.Threads[i] = thr;

                }



                int count = settings.GithubInfos.Count;
                fileAsyncManager = new FileAsyncManager<string, string>(count);


                int gi = 0;
                foreach (var gr in settings.GithubInfos)
                {
                    var thru = new FileAsyncThread<string, string>(new GitFileClient(gr.UName, gr.ps, gr.Repo, gr.Path)) { Aes = settings.GetAes() };
                    fileAsyncManager.Threads[gi] = thru;
                    //thr.FileClient.DeleteAll().Wait();

                    thru.LastFileIndex = await thru.FileClient.GetLastFileIndex();
                    downloadAsyncManager.Threads[gi].LastFileIndex = thru.LastFileIndex;

                    Console.WriteLine($"{gi}. Selected LastFileIndex {thru.LastFileIndex}");


                    gi++;
                }




                break;

            case CDNType.Firestore:
                break;

            default:
                break;
        }



    }

}