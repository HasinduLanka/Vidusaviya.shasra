@inject IJSRuntime JsRuntime
@page "/streamer"

<h1>@stat</h1>

<input type="button" class="btn-sm btn-outline-primary" @onclick="Capture" value="Capture" />
<input type="button" class="btn-sm btn-@(IsRecording?"danger":"success")" @onclick="ToggleRecording" value="@((IsRecording?"Stop recording":"Start recording"))" />
<div class="row">
    <div class="col-md-4">
        <center>
            <h6>Live Webcam</h6>
            <video id="video" width="480" height="360" autoplay></video>
        </center>
    </div>
    <div class="col-md-4">
        <center>
            <h6>Compressed feed</h6>
            <canvas id="midcanvas" width="480" height="360"></canvas>

            <h6>(@RunLoop?"⬤":"⏹")</h6>
        </center>
    </div>
    <div class="col-md-4">
        <center>
            <h6>Captured Video</h6>
            <canvas id="capturedImage" width="320" height="240"></canvas>
            <h4>@msg</h4>
        </center>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <center>
            <h5>Peer simulation</h5>
            <video id="video2" width="1280" height="720" autoplay></video>
        </center>
    </div>
</div>


@code  {
    // style="display: none"

    public string stat { get; set; }
    public string msg { get; set; }
    public bool IsRecording = false;

    public System.Timers.Timer Timer;
    public System.Diagnostics.Stopwatch Stopwatch = new System.Diagnostics.Stopwatch();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        stat = await JsRuntime.InvokeAsync<string>("SayHi", "C Sharp");


        stat = await JsRuntime.InvokeAsync<string>("StartPreview", Array.Empty<string>());

    }

    public async void Capture()
    {


        await JsRuntime.InvokeVoidAsync("Snap", "video", "capturedImage");
        var imageBytes = await JsRuntime.InvokeAsync<string>("GetImageData", "capturedImage", "image/bmp");
        // var data = Convert.FromBase64String(imageBytes); // get the image as byte array
    }

    public async void ToggleRecording()
    {
        IsRecording = !IsRecording;

        if (IsRecording)
        {
            await JsRuntime.InvokeVoidAsync("StartRec");

            RunLoop = true;

            Timer = new System.Timers.Timer(LoopIntervel);
            Timer.Elapsed += StreamLoop;

            Stopwatch.Start();
            Timer.Start();

            // await this.InvokeAsync(StateHasChanged);


        }
        else
        {

            RunLoop = false;
            Timer.Stop();
            Stopwatch.Stop();


            await JsRuntime.InvokeVoidAsync("StopRec");

            // await this.InvokeAsync(StateHasChanged);
        }
    }


    public long LoopIntervel = 500;
    bool RunLoop = false;

    public async void StreamLoop(object sender, System.Timers.ElapsedEventArgs e)
    {
        //Loop:

        {
            string bloburl = await JsRuntime.InvokeAsync<string>("GetWCStream", null);
            if (bloburl != "")
            {
                msg = bloburl;
                // await this.InvokeAsync(StateHasChanged);
            }
        }

        //if (RunLoop)
        //    goto Loop;

    }

}